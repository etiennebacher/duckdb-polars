{
  "hash": "e744132bb34545534c04474825fbff2d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Polars from Python and R\nsubtitle: 'Pro-tip: Just swap `.` (Python) for `$` (R), or vice versa'\nexecute:\n  freeze: auto\n  cache: true\n---\n\n\n\n\n## Load libraries\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars as pl\nimport time\nimport matplotlib\n```\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(polars)\n```\n:::\n\n\n:::\n\n## Scan data \n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnyc = pl.scan_parquet(\"nyc-taxi/**/*.parquet\")\nnyc\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<h4>NAIVE QUERY PLAN</h4><p>run <b>LazyFrame.show_graph()</b> to see the optimized version</p><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 10.0.1 (20240210.2158)\n -->\n<!-- Title: polars_query Pages: 1 -->\n<svg width=\"457pt\" height=\"66pt\"\n viewBox=\"0.00 0.00 456.75 65.50\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 61.5)\">\n<title>polars_query</title>\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-61.5 452.75,-61.5 452.75,4 -4,4\"/>\n<!-- [Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45;] -->\n<g id=\"node1\" class=\"node\">\n<title>[Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45;]</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"448.75,-57.5 0,-57.5 0,0 448.75,0 448.75,-57.5\"/>\n<text text-anchor=\"middle\" x=\"224.38\" y=\"-40.2\" font-family=\"Times,serif\" font-size=\"14.00\">[Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;</text>\n<text text-anchor=\"middle\" x=\"224.38\" y=\"-23.7\" font-family=\"Times,serif\" font-size=\"14.00\">π */?;</text>\n<text text-anchor=\"middle\" x=\"224.38\" y=\"-7.2\" font-family=\"Times,serif\" font-size=\"14.00\">σ &#45;]</text>\n</g>\n</g>\n</svg>\n```\n\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnyc = pl$scan_parquet(\"nyc-taxi/**/*.parquet\")\nnyc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npolars LazyFrame\n $describe_optimized_plan() : Show the optimized query plan.\n\nNaive plan:\n\n  Parquet SCAN 12 files: first file: nyc-taxi/year=2012/month=1/part-0.parquet\n  PROJECT */24 COLUMNS\n```\n\n\n:::\n:::\n\n:::\n\n## First example\n\nPolars operations are registered as queries until they are collected.\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nq1 = (\n    nyc\n    .group_by([\"passenger_count\"])\n    .agg([\n            pl.mean(\"tip_amount\")#.alias(\"mean_tip\") ## alias is optional\n        ])\n    .sort(\"passenger_count\")\n)\nq1\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<h4>NAIVE QUERY PLAN</h4><p>run <b>LazyFrame.show_graph()</b> to see the optimized version</p><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 10.0.1 (20240210.2158)\n -->\n<!-- Title: polars_query Pages: 1 -->\n<svg width=\"452pt\" height=\"231pt\"\n viewBox=\"0.00 0.00 452.25 231.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 227)\">\n<title>polars_query</title>\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-227 448.25,-227 448.25,4 -4,4\"/>\n<!-- SORT BY [col(&quot;passenger_count&quot;)] [(0, 0)] -->\n<g id=\"node1\" class=\"node\">\n<title>SORT BY [col(&quot;passenger_count&quot;)] [(0, 0)]</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"328,-223 116.25,-223 116.25,-187 328,-187 328,-223\"/>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-199.95\" font-family=\"Times,serif\" font-size=\"14.00\">SORT BY [col(&quot;passenger_count&quot;)]</text>\n</g>\n<!-- AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)] -->\n<g id=\"node2\" class=\"node\">\n<title>AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)]</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"322.38,-151 121.88,-151 121.88,-93.5 322.38,-93.5 322.38,-151\"/>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-133.7\" font-family=\"Times,serif\" font-size=\"14.00\">AGG [col(&quot;tip_amount&quot;).mean()]</text>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-117.2\" font-family=\"Times,serif\" font-size=\"14.00\">BY</text>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-100.7\" font-family=\"Times,serif\" font-size=\"14.00\">[col(&quot;passenger_count&quot;)] [(0, 1)]</text>\n</g>\n<!-- SORT BY [col(&quot;passenger_count&quot;)] [(0, 0)]&#45;&#45;AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)] -->\n<g id=\"edge1\" class=\"edge\">\n<title>SORT BY [col(&quot;passenger_count&quot;)] [(0, 0)]&#45;&#45;AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)]</title>\n<path fill=\"none\" stroke=\"black\" d=\"M222.12,-186.88C222.12,-176.6 222.12,-163.27 222.12,-151.47\"/>\n</g>\n<!-- Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45; [(0, 2)] -->\n<g id=\"node3\" class=\"node\">\n<title>Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45; [(0, 2)]</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"444.25,-57.5 0,-57.5 0,0 444.25,0 444.25,-57.5\"/>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-40.2\" font-family=\"Times,serif\" font-size=\"14.00\">Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;</text>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-23.7\" font-family=\"Times,serif\" font-size=\"14.00\">π */?;</text>\n<text text-anchor=\"middle\" x=\"222.12\" y=\"-7.2\" font-family=\"Times,serif\" font-size=\"14.00\">σ &#45;</text>\n</g>\n<!-- AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)]&#45;&#45;Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45; [(0, 2)] -->\n<g id=\"edge2\" class=\"edge\">\n<title>AGG [col(&quot;tip_amount&quot;).mean()]\nBY\n[col(&quot;passenger_count&quot;)] [(0, 1)] [(0, 1)]&#45;&#45;Parquet SCAN 12 files: first file: nyc&#45;taxi/year=2012/month=1/part&#45;0.parquet;\nπ */?;\nσ &#45; [(0, 2)]</title>\n<path fill=\"none\" stroke=\"black\" d=\"M222.12,-93.3C222.12,-82.05 222.12,-69.11 222.12,-57.84\"/>\n</g>\n</g>\n</svg>\n```\n\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq1 = (\n    nyc\n    $group_by(\"passenger_count\")\n    $agg(\n        pl$mean(\"tip_amount\")#$alias(\"mean_tip\") ## alias is optional\n    )\n    $sort(\"passenger_count\")\n)\nq1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npolars LazyFrame\n $describe_optimized_plan() : Show the optimized query plan.\n\nNaive plan:\nSORT BY [col(\"passenger_count\")]\n  AGGREGATE\n  \t[col(\"tip_amount\").mean()] BY [col(\"passenger_count\")] FROM\n\n      Parquet SCAN 12 files: first file: nyc-taxi/year=2012/month=1/part-0.parquet\n      PROJECT */24 COLUMNS\n```\n\n\n:::\n:::\n\n\n::::{.callout-note}\n## R-polars multiline syntax\n\nPolars-style `x$method1()$method2()...` chaining may seem a little odd to R users, especially for multiline queries. Here I have adopted the same general styling as Python: By enclosing the full query in parentheses `()`, we can start each `$method()` on a new line. If this isn't to your fancy, you could also rewrite these multiline queries as follows:\n\n```r\nnyc$group_by(\n    \"passenger_count\"\n)$agg(\n    pl$mean(\"tip_amount\")\n)$sort(\"passenger_count\")\n```\n::::\n\n:::\n\n(Note: this is the naive query plan, not the optimized query that **polars**\nwill actually implement for us. We'll come back to this idea shortly.)\n\nCalling `collect()` enforces computation.\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntic = time.time()\ndat1 = q1.collect()\ntoc = time.time()\n\ndat1\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (18, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>passenger_count</th><th>tip_amount</th></tr><tr><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>0</td><td>0.862099</td></tr><tr><td>1</td><td>1.151011</td></tr><tr><td>2</td><td>1.08158</td></tr><tr><td>3</td><td>0.962949</td></tr><tr><td>4</td><td>0.844519</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>177</td><td>1.0</td></tr><tr><td>208</td><td>0.0</td></tr><tr><td>247</td><td>2.3</td></tr><tr><td>249</td><td>0.0</td></tr><tr><td>254</td><td>0.0</td></tr></tbody></table></div>\n```\n\n:::\n\n```{.python .cell-code}\n# print(f\"Time difference of {toc - tic} seconds\")\n```\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic = Sys.time()\ndat1 = q1$collect()\ntoc = Sys.time()\n\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (18, 2)\n┌─────────────────┬────────────┐\n│ passenger_count ┆ tip_amount │\n│ ---             ┆ ---        │\n│ i64             ┆ f64        │\n╞═════════════════╪════════════╡\n│ 0               ┆ 0.862099   │\n│ 1               ┆ 1.151011   │\n│ 2               ┆ 1.08158    │\n│ 3               ┆ 0.962949   │\n│ 4               ┆ 0.844519   │\n│ …               ┆ …          │\n│ 177             ┆ 1.0        │\n│ 208             ┆ 0.0        │\n│ 247             ┆ 2.3        │\n│ 249             ┆ 0.0        │\n│ 254             ┆ 0.0        │\n└─────────────────┴────────────┘\n```\n\n\n:::\n\n```{.r .cell-code}\ntoc - tic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 2.80115 secs\n```\n\n\n:::\n:::\n\n\n:::\n\n## Aggregation\n\nSubsetting along partition dimensions allows for even more efficiency gains.\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nq2 = (\n    nyc\n    .filter(pl.col(\"month\") <= 3)\n    .group_by([\"month\", \"passenger_count\"])\n    .agg([pl.mean(\"tip_amount\").alias(\"mean_tip\")])\n    .sort(\"passenger_count\")\n)\n```\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq2 = (\n    nyc\n    $filter(pl$col(\"month\") <= 3)\n    $group_by(\"month\", \"passenger_count\")\n    $agg(pl$mean(\"tip_amount\")$alias(\"mean_tip\"))\n    $sort(\"passenger_count\")\n)\n```\n:::\n\n\n:::\n\nLet's take a look at the optimized query that Polars will implement for us.\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# q2             # naive\nq2.show_graph()  # optimized\n```\n\n::: {.cell-output-display}\n![](rpy-polars_files/figure-html/pl_q2_show-1.png){width=1536}\n:::\n:::\n\n\n### R \n\n\n::: {.cell}\n\n```{.r .cell-code}\nq2$describe_optimized_plan()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSORT BY [col(\"passenger_count\")]\n  AGGREGATE\n  \t[col(\"tip_amount\").mean().alias(\"mean_tip\")] BY [col(\"month\"), col(\"passenger_count\")] FROM\n\n      Parquet SCAN 3 files: first file: nyc-taxi/year=2012/month=1/part-0.parquet\n      PROJECT 3/24 COLUMNS\n      SELECTION: [(col(\"month\").cast(Float64)) <= (3.0)]\n```\n\n\n:::\n:::\n\n\n:::\n\nNow, let's run the query and collect the results.\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntic = time.time()\ndat2 = q2.collect()\ntoc = time.time()\n\ndat2\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (29, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>month</th><th>passenger_count</th><th>mean_tip</th></tr><tr><td>i64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>0</td><td>0.841718</td></tr><tr><td>2</td><td>0</td><td>0.876637</td></tr><tr><td>3</td><td>0</td><td>0.877675</td></tr><tr><td>3</td><td>1</td><td>1.089205</td></tr><tr><td>1</td><td>1</td><td>1.036863</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>2</td><td>9</td><td>0.0</td></tr><tr><td>1</td><td>9</td><td>0.0</td></tr><tr><td>1</td><td>65</td><td>0.0</td></tr><tr><td>3</td><td>208</td><td>0.0</td></tr><tr><td>1</td><td>208</td><td>0.0</td></tr></tbody></table></div>\n```\n\n:::\n\n```{.python .cell-code}\n# print(f\"Time difference of {toc - tic} seconds\")\n```\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic = Sys.time()\ndat2 = q2$collect()\ntoc = Sys.time()\n\ndat2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (29, 3)\n┌───────┬─────────────────┬──────────┐\n│ month ┆ passenger_count ┆ mean_tip │\n│ ---   ┆ ---             ┆ ---      │\n│ i64   ┆ i64             ┆ f64      │\n╞═══════╪═════════════════╪══════════╡\n│ 2     ┆ 0               ┆ 0.876637 │\n│ 3     ┆ 0               ┆ 0.877675 │\n│ 1     ┆ 0               ┆ 0.841718 │\n│ 1     ┆ 1               ┆ 1.036863 │\n│ 2     ┆ 1               ┆ 1.06849  │\n│ …     ┆ …               ┆ …        │\n│ 2     ┆ 9               ┆ 0.0      │\n│ 1     ┆ 9               ┆ 0.0      │\n│ 1     ┆ 65              ┆ 0.0      │\n│ 1     ┆ 208             ┆ 0.0      │\n│ 3     ┆ 208             ┆ 0.0      │\n└───────┴─────────────────┴──────────┘\n```\n\n\n:::\n\n```{.r .cell-code}\ntoc - tic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 3.239856 secs\n```\n\n\n:::\n:::\n\n\n:::\n\nHigh-dimensional grouping example.\nThis query provides an example where **polars** is noticeably slower than\nDuckDB.\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nq3 = (\n    nyc\n    .group_by([\"passenger_count\", \"trip_distance\"])\n    .agg([\n        pl.mean(\"tip_amount\").alias(\"mean_tip\"),\n        pl.mean(\"fare_amount\").alias(\"mean_fare\"),\n        ])\n    .sort([\"passenger_count\", \"trip_distance\"])\n)\n\ntic = time.time()\ndat3 = q3.collect()\ntoc = time.time()\n\ndat3\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (25_569, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>passenger_count</th><th>trip_distance</th><th>mean_tip</th><th>mean_fare</th></tr><tr><td>i64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>0</td><td>0.0</td><td>1.345135</td><td>17.504564</td></tr><tr><td>0</td><td>0.01</td><td>0.178571</td><td>34.642857</td></tr><tr><td>0</td><td>0.02</td><td>4.35</td><td>61.05</td></tr><tr><td>0</td><td>0.03</td><td>16.25</td><td>74.0</td></tr><tr><td>0</td><td>0.04</td><td>0.03</td><td>46.5</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>208</td><td>5.1</td><td>0.0</td><td>12.5</td></tr><tr><td>208</td><td>6.6</td><td>0.0</td><td>17.7</td></tr><tr><td>247</td><td>3.31</td><td>2.3</td><td>11.5</td></tr><tr><td>249</td><td>1.69</td><td>0.0</td><td>8.5</td></tr><tr><td>254</td><td>1.02</td><td>0.0</td><td>6.0</td></tr></tbody></table></div>\n```\n\n:::\n\n```{.python .cell-code}\n# print(f\"Time difference of {toc - tic} seconds\")\n```\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq3 = (\n    nyc\n    $group_by(\"passenger_count\", \"trip_distance\")\n    $agg(\n        pl$mean(\"tip_amount\")$alias(\"mean_tip\"),\n        pl$mean(\"fare_amount\")$alias(\"mean_fare\")\n        )\n    $sort(\"passenger_count\", \"trip_distance\")\n)\n\ntic = Sys.time()\ndat3 = q3$collect()\ntoc = Sys.time()\n\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (25_569, 4)\n┌─────────────────┬───────────────┬──────────┬───────────┐\n│ passenger_count ┆ trip_distance ┆ mean_tip ┆ mean_fare │\n│ ---             ┆ ---           ┆ ---      ┆ ---       │\n│ i64             ┆ f64           ┆ f64      ┆ f64       │\n╞═════════════════╪═══════════════╪══════════╪═══════════╡\n│ 0               ┆ 0.0           ┆ 1.345135 ┆ 17.504564 │\n│ 0               ┆ 0.01          ┆ 0.178571 ┆ 34.642857 │\n│ 0               ┆ 0.02          ┆ 4.35     ┆ 61.05     │\n│ 0               ┆ 0.03          ┆ 16.25    ┆ 74.0      │\n│ 0               ┆ 0.04          ┆ 0.03     ┆ 46.5      │\n│ …               ┆ …             ┆ …        ┆ …         │\n│ 208             ┆ 5.1           ┆ 0.0      ┆ 12.5      │\n│ 208             ┆ 6.6           ┆ 0.0      ┆ 17.7      │\n│ 247             ┆ 3.31          ┆ 2.3      ┆ 11.5      │\n│ 249             ┆ 1.69          ┆ 0.0      ┆ 8.5       │\n│ 254             ┆ 1.02          ┆ 0.0      ┆ 6.0       │\n└─────────────────┴───────────────┴──────────┴───────────┘\n```\n\n\n:::\n\n```{.r .cell-code}\ntoc - tic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 53.98448 secs\n```\n\n\n:::\n:::\n\n\n:::\n\nAs an aside, if we didn't care about column aliases (or sorting), then the previous query could be shortened to:\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n```python\n(\n    nyc\n    .group_by([\"passenger_count\", \"trip_distance\"])\n    .agg(pl.col([\"tip_amount\", \"fare_amount\"]).mean())\n    .collect()\n)\n```\n\n### R\n\n```r\n(\n    nyc\n    $group_by(\"passenger_count\", \"trip_distance\")\n    $agg(pl$col(\"tip_amount\", \"fare_amount\")$mean())\n    $collect()\n)\n```\n\n:::\n\n## Pivot (reshape)\n\nIn **polars**, we have two distinct reshape methods:\n\n- `pivot`: => long to wide\n- `melt`: => wide to long \n\nHere we'll _melt_ to go from wide to long and use the eager execution engine\n(i.e., on the `dat3` DataFrame object that we've already computed) for\nexpediency.\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndat3.melt(id_vars = [\"passenger_count\", \"trip_distance\"])\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (51_138, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>passenger_count</th><th>trip_distance</th><th>variable</th><th>value</th></tr><tr><td>i64</td><td>f64</td><td>str</td><td>f64</td></tr></thead><tbody><tr><td>0</td><td>0.0</td><td>&quot;mean_tip&quot;</td><td>1.345135</td></tr><tr><td>0</td><td>0.01</td><td>&quot;mean_tip&quot;</td><td>0.178571</td></tr><tr><td>0</td><td>0.02</td><td>&quot;mean_tip&quot;</td><td>4.35</td></tr><tr><td>0</td><td>0.03</td><td>&quot;mean_tip&quot;</td><td>16.25</td></tr><tr><td>0</td><td>0.04</td><td>&quot;mean_tip&quot;</td><td>0.03</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>208</td><td>5.1</td><td>&quot;mean_fare&quot;</td><td>12.5</td></tr><tr><td>208</td><td>6.6</td><td>&quot;mean_fare&quot;</td><td>17.7</td></tr><tr><td>247</td><td>3.31</td><td>&quot;mean_fare&quot;</td><td>11.5</td></tr><tr><td>249</td><td>1.69</td><td>&quot;mean_fare&quot;</td><td>8.5</td></tr><tr><td>254</td><td>1.02</td><td>&quot;mean_fare&quot;</td><td>6.0</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$melt(id_vars = c(\"passenger_count\", \"trip_distance\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (51_138, 4)\n┌─────────────────┬───────────────┬───────────┬──────────┐\n│ passenger_count ┆ trip_distance ┆ variable  ┆ value    │\n│ ---             ┆ ---           ┆ ---       ┆ ---      │\n│ i64             ┆ f64           ┆ str       ┆ f64      │\n╞═════════════════╪═══════════════╪═══════════╪══════════╡\n│ 0               ┆ 0.0           ┆ mean_tip  ┆ 1.345135 │\n│ 0               ┆ 0.01          ┆ mean_tip  ┆ 0.178571 │\n│ 0               ┆ 0.02          ┆ mean_tip  ┆ 4.35     │\n│ 0               ┆ 0.03          ┆ mean_tip  ┆ 16.25    │\n│ 0               ┆ 0.04          ┆ mean_tip  ┆ 0.03     │\n│ …               ┆ …             ┆ …         ┆ …        │\n│ 208             ┆ 5.1           ┆ mean_fare ┆ 12.5     │\n│ 208             ┆ 6.6           ┆ mean_fare ┆ 17.7     │\n│ 247             ┆ 3.31          ┆ mean_fare ┆ 11.5     │\n│ 249             ┆ 1.69          ┆ mean_fare ┆ 8.5      │\n│ 254             ┆ 1.02          ┆ mean_fare ┆ 6.0      │\n└─────────────────┴───────────────┴───────────┴──────────┘\n```\n\n\n:::\n:::\n\n\n:::\n\n## Joins (merges)\n\n::: {.panel-tabset group=\"language\"}\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmean_tips  = nyc.group_by(\"month\").agg(pl.col(\"tip_amount\").mean())\nmean_fares = nyc.group_by(\"month\").agg(pl.col(\"fare_amount\").mean())\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n(\n    mean_tips\n    .join(\n        mean_fares,\n        on = \"month\",\n        how = \"left\" # default is inner join\n    )\n    .collect()\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (12, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>month</th><th>tip_amount</th><th>fare_amount</th></tr><tr><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>9</td><td>1.254601</td><td>12.391198</td></tr><tr><td>6</td><td>1.091082</td><td>10.548651</td></tr><tr><td>12</td><td>1.237651</td><td>12.313953</td></tr><tr><td>3</td><td>1.056353</td><td>10.223107</td></tr><tr><td>7</td><td>1.059312</td><td>10.379943</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>10</td><td>1.281239</td><td>12.501252</td></tr><tr><td>8</td><td>1.079521</td><td>10.49265</td></tr><tr><td>11</td><td>1.250903</td><td>12.270138</td></tr><tr><td>2</td><td>1.036874</td><td>9.94264</td></tr><tr><td>5</td><td>1.078014</td><td>10.585157</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_tips  = nyc$group_by(\"month\")$agg(pl$col(\"tip_amount\")$mean())\nmean_fares = nyc$group_by(\"month\")$agg(pl$col(\"fare_amount\")$mean())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(\n    mean_tips\n    $join(\n        mean_fares,\n        on = \"month\",\n        how = \"left\" # default is inner join\n    )\n    $collect()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (12, 3)\n┌───────┬────────────┬─────────────┐\n│ month ┆ tip_amount ┆ fare_amount │\n│ ---   ┆ ---        ┆ ---         │\n│ i64   ┆ f64        ┆ f64         │\n╞═══════╪════════════╪═════════════╡\n│ 6     ┆ 1.091082   ┆ 10.548651   │\n│ 9     ┆ 1.254601   ┆ 12.391198   │\n│ 12    ┆ 1.237651   ┆ 12.313953   │\n│ 3     ┆ 1.056353   ┆ 10.223107   │\n│ 4     ┆ 1.043167   ┆ 10.33549    │\n│ …     ┆ …          ┆ …           │\n│ 7     ┆ 1.059312   ┆ 10.379943   │\n│ 2     ┆ 1.036874   ┆ 9.94264     │\n│ 8     ┆ 1.079521   ┆ 10.49265    │\n│ 5     ┆ 1.078014   ┆ 10.585157   │\n│ 11    ┆ 1.250903   ┆ 12.270138   │\n└───────┴────────────┴─────────────┘\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Appendix: Alternate interfaces\n\nThe native **polars** API is not the only way to interface with the underlying\ncomputation engine. Here are two alternate approaches that you may prefer,\nespecially if you don't want to learn a new syntax.\n\n### Ibis (Python)\n\nThe great advantage of **Ibis** (like **dbplyr**) is that it supports multiple\nbackends through an identical frontend. So, all of our syntax logic and workflow\nfrom the Ibis+DuckDB section carry over to an equivalent Ibis+Polars workflow\ntoo. All you need to do is change the connection type. For example:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport ibis\nimport ibis.selectors as s\nfrom ibis import _\n\n##! This next line is the only thing that's changed !##\ncon = ibis.polars.connect()\n\ncon.register(\"nyc-taxi/**/*.parquet\", \"nyc\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDatabaseTable: nyc\n  vendor_name           string\n  pickup_datetime       timestamp\n  dropoff_datetime      timestamp\n  passenger_count       int64\n  trip_distance         float64\n  pickup_longitude      float64\n  pickup_latitude       float64\n  rate_code             string\n  store_and_fwd         string\n  dropoff_longitude     float64\n  dropoff_latitude      float64\n  payment_type          string\n  fare_amount           float64\n  extra                 float64\n  mta_tax               float64\n  tip_amount            float64\n  tolls_amount          float64\n  total_amount          float64\n  improvement_surcharge float64\n  congestion_surcharge  float64\n  pickup_location_id    int64\n  dropoff_location_id   int64\n  year                  int64\n  month                 int64\n```\n\n\n:::\n\n```{.python .cell-code}\nnyc = con.table(\"nyc\")\n\n(\n  nyc\n  .group_by([\"passenger_count\"])\n  .agg(mean_tip = _.tip_amount.mean())\n  .execute()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    passenger_count  mean_tip\n0                 3  0.962949\n1                 9  0.806800\n2                 0  0.862099\n3                 6  1.128365\n4                66  1.500000\n5               254  0.000000\n6                 1  1.151011\n7                 7  0.544118\n8                 4  0.844519\n9                10  0.000000\n10              177  1.000000\n11              249  0.000000\n12                2  1.081580\n13                5  1.102732\n14                8  0.350769\n15               65  0.000000\n16              208  0.000000\n17              247  2.300000\n```\n\n\n:::\n:::\n\n\n_Aside: Remember that you will be able to call `to_polars()` rather than\n`execute()` (which coerces to a pandas DataFrame) at the end, once Ibis\n[v9.0.0](https://ibis-project.org/release_notes#9.0.0) is released._\n\n### tidypolars (R)\n\nThe **tidypolars** package ([link](https://www.tidypolars.etiennebacher.com/)) provides a \"tidyverse\" backend for **polars** from R. The syntax and workflow should thus be immediately familar to R users.\n\nIt's important to note that **tidypolars** is _solely_ focused on the\ntranslation work. This means that you still need to load the main **polars**\nlibrary alongside it for the actual computation, as well as **dplyr** (and\npotentially **tidyr**) for function generics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(polars) ## Already loaded\nlibrary(tidypolars)\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr, warn.conflicts = FALSE)\n\nnyc = pl$scan_parquet(\"nyc-taxi/**/*.parquet\")\n\nnyc |> \n    summarise(mean_tip = mean(tip_amount), .by = passenger_count) |>\n    compute()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (18, 2)\n┌─────────────────┬──────────┐\n│ passenger_count ┆ mean_tip │\n│ ---             ┆ ---      │\n│ i64             ┆ f64      │\n╞═════════════════╪══════════╡\n│ 0               ┆ 0.862099 │\n│ 3               ┆ 0.962949 │\n│ 9               ┆ 0.8068   │\n│ 6               ┆ 1.128365 │\n│ 66              ┆ 1.5      │\n│ …               ┆ …        │\n│ 8               ┆ 0.350769 │\n│ 2               ┆ 1.08158  │\n│ 65              ┆ 0.0      │\n│ 208             ┆ 0.0      │\n│ 247             ┆ 2.3      │\n└─────────────────┴──────────┘\n```\n\n\n:::\n:::\n\n\n_Aside: Use `collect()` instead of `compute()` at the end if you would prefer to\nreturn a standard R data.frame instead of a Polars DataFrame._\n\nSee also **polarssql** ([link](https://rpolars.github.io/r-polarssql/)) if you\nwould like yet another \"tidyverse\"-esque alternative that works through\n**DBI**/**d(b)plyr**.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}